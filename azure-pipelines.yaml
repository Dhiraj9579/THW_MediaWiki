trigger:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/*
      - ansible/*

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: TerraformDeployment
  displayName: 'Terraform Deployment'
  jobs:
  - job: TerraformJob
    displayName: 'Run Terraform'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - task: InstallTerraform@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: '<your_azure_service_connection_name>'

- stage: AnsibleDeployment
  displayName: 'Ansible Deployment'
  jobs:
  - job: AnsibleJob
    displayName: 'Run Ansible'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - task: InstallDependencies@0
      displayName: 'Install Python dependencies'
      inputs:
        command: 'install'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        targetType: 'inline'
        pythonVersion: '3.x'
        pipDependencies: |
          ansible==2.10.12
          pyOpenSSL

    - script: |
        ansible-galaxy install -r ansible/requirements.yml
      displayName: 'Install Ansible roles'

    - script: |
        ansible-playbook ansible/deploy_mediawiki.yml
      displayName: 'Run Ansible playbook'
      env:
        ANSIBLE_STDOUT_CALLBACK: 'yaml'